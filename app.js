import 'express-async-errors'
import config from './utils/config.js'
import express from 'express'
import connectMongoDB from './db/mongodb.js'
import session from 'express-session'
import MongoDBStore from 'connect-mongo'
import errorHandlerMiddleware from './middleware/errorHandler.js'
import notFound from './middleware/notFound.js'
import passport from 'passport'
import { initializePassport } from './config/passport.js'
import albums from './routes/albums.js'
import users from './routes/users.js'

import indexRouter from './routes/index.js'
import authRouter from './routes/auth.js'

const app = express()

// use views generated by pug
app.set('view engine', 'pug')
app.set('views', './views')

app.use(express.json())
app.use(express.urlencoded({ extended: false }))

// cookies
app.use(session({
    name: 'session_id',
    secret: config.SESSION_SECRET || 'supersecret_string',
    resave: false,
    saveUninitialized: false,
    store: MongoDBStore.create({
        mongoUrl: config.MONGO_URI,
        collection: 'passport-sessions',
    }),
    // enable when using https
    // cookie: { secure: true }
}))

// Initialize Passport
initializePassport()
app.use(passport.initialize())
app.use(passport.session())

app.use('/', indexRouter)
app.use('/', authRouter)

app.use('/albums', albums)
app.use('/users', users)

app.use(notFound)

app.use(errorHandlerMiddleware)

// MongoDB connection
// server connection moved to server.js 
try {
    await connectMongoDB(config.MONGO_URI)
} catch (error) {
    console.log('Failed to connect:', error)
}

export default app